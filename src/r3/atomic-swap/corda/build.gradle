import net.corda.plugins.Cordform
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        // springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda-releases' }
        maven { url 'https://download.corda.net/maven/corda-dependencies' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects { // Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"

    apply plugin: 'net.corda.plugins.cordapp'
    apply plugin: 'net.corda.plugins.cordformation'
    apply plugin: 'net.corda.plugins.quasar-utils'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

// Module dependencies
dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    cordaDriver "net.corda:corda-shell:4.9"

    // Web3j dependencies

    cordaDriver("org.web3j:core:$web3jVersion") {
        transitive = true
    }

//    cordaDriver "org.web3j:rlp:$web3jVersion"
//    cordaDriver "org.web3j:crypto:$web3jVersion"
//    cordaDriver "org.web3j:abi:$web3jVersion"
//    cordaDriver "org.web3j:utils:$web3jVersion"
//    cordaDriver "org.web3j:tuples:$web3jVersion"
//    cordaDriver "io.reactivex.rxjava2:rxjava:2.2.2"
//    cordaDriver "org.reactivestreams:reactive-streams:1.0.2"

    // Project dependencies
    cordapp project(':evm-bridge-contracts')
    cordapp project(':evm-bridge-workflows')
}

// Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        extraConfig = [
                quasarExcludePackages: ["okhttp3**"]
        ]
        runSchemaMigration = true
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]

        cordapp project(':evm-bridge-contracts')
        cordapp project(':evm-bridge-workflows')
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10001
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5001"
                ]
        ]
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10021")
        }

    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10002
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5002"
                ]
        ]
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10022")
        }
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10003
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5003"
                ]
        ]
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10023")
        }
    }
}
